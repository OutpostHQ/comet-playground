import { NextApiRequest, NextApiResponse } from "next"
import { createURL } from "@src/utils/createURL"
import { getToken } from "next-auth/jwt"

const BASE_URL = `${process.env.OUTPOST_API_URL}`

const enableLogging =
  process.env.NODE_ENV === "production"
    ? true
    : process.env.GET_OUTPOST_REQUEST_LOGS

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    // extract elements from the request including token
    // and forward the request

    const { query, method, body } = req
    const { accessToken } = (await getToken({ req })) || {
      accessToken: "",
    }

    const path = createURL(query, BASE_URL)
    const result = await fetch(path, {
      method,
      body:
        method === "POST" || method === "DELETE" || method === "PUT"
          ? JSON.stringify(body || {})
          : null,
      headers: {
        "content-type": "application/json",
        Authorization: `Bearer ${encodeURIComponent(accessToken as string)}`,
      },
    })

    if (enableLogging) {
      console.log("CLIENT SIDE REQUEST: ")

      console.log(
        JSON.stringify(
          {
            path,
            method,
            body:
              method === "POST" || method === "DELETE"
                ? JSON.stringify(body || {})
                : null,
            headers: {
              "content-type": "application/json",
              Authorization: `Bearer ${encodeURIComponent(
                accessToken as string
              )}`,
            },
          },
          null,
          2
        )
      )
    }

    res.status(result.status)
    if (result?.headers?.get("content-type")?.includes("application/json")) {
      const data = await result.json()
      if (enableLogging)
        console.log(
          "CLIENT SIDE REQUEST Response: : " +
            JSON.stringify(data, null, 2) +
            "\n\n\n\n\n\n"
        )
      return res.json(data)
    }

    return res.json({})
  } catch (e) {
    console.error(e)
    res.status(400)
    res.json({
      errorCode: 200,
    })
  }
}
